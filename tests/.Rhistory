lambdaS = 1e-4
lambdaT = 1e-4
#### Test 3.1: Without GCV
results <- microbenchmark(output_CPP<-smooth.FEM.time(time_mesh = TimePoints, observations=observations,
FEMbasis=FEMbasis, lambdaS=lambdaS, lambdaT=lambdaT,
PDE_parameters=PDE_parameters,
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2]
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2], FLAG_FINITEDIFFERENCES = flags[i,3]   )
for (i in seq(from = 1,to = dim(flags)[1], by = 1)) {
k = 0
for (seed_number in seed_numbers) {
for (n in nRef) {
x = seq(0,1, length.out = (5*n)+1)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes = dim(mesh$nodes)[1]
FEMbasis = create.FEM.basis(mesh)
k = k + 1
if(k == 1)
NumTimePoints=11
else
NumTimePoints=13
TimePoints=seq(0,2,length.out = NumTimePoints)
SpacePoints=mesh$nodes
SpaceTimePoints=cbind(rep(mesh$nodes[,1],NumTimePoints),rep(mesh$nodes[,2],NumTimePoints),rep(TimePoints,each=nrow(mesh$nodes)))
# Exact solution (pointwise at nodes)
sol_exact=f(SpaceTimePoints[,1],SpaceTimePoints[,2],SpaceTimePoints[,3])
set.seed(seed_number)
ran = range(sol_exact)
data = sol_exact + rnorm(length(sol_exact), mean=0, sd=0.05*abs(ran[2]-ran[1]))
observations=matrix(data,nrow(SpacePoints),NumTimePoints)
# Set PDE parameters
PDE_parameters = list(K = matrix(c(1,0,0,4), nrow = 2), b = c(0,0), c = 0)
# Set smoothing parameter
lambdaS = 1e-4
lambdaT = 1e-4
#### Test 3.1: Without GCV
results <- microbenchmark(output_CPP<-smooth.FEM.time(time_mesh = TimePoints, observations=observations,
FEMbasis=FEMbasis, lambdaS=lambdaS, lambdaT=lambdaT,
PDE_parameters=PDE_parameters,
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2],
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2], FLAG_FINITEDIFFERENCES = flags[i,3]   )
,times = 1)
# RMSE evaluation on a fine grid
xeval=runif(1000,0,1)  # quadrato con x tra 0 e 1
yeval=runif(1000,0,1)  # quadrato con y tra 0 e 1
teval=runif(1000,0,2)
sol_eval=eval.FEM.time(output_CPP$fit.FEM.time,space.time.locations = cbind(teval,xeval,yeval))
sol_exact=f(xeval,yeval,teval)
RMSE<-function(f,g) sqrt(mean((f-g)^2))
RMSE_matrix[i, k] = RMSE(sol_eval,sol_exact)
time_matrix[i, k] = results$time/10^6 #ms
}
}
}
library(fdaPDE)
library(microbenchmark)
rm(list=ls())
graphics.off()
# x = seq(0,1, length.out = 41)
# y = x
# locations = expand.grid(x,y)
#
# mesh = create.mesh.2D(locations)
# plot(mesh)
#
# nnodes = dim(mesh$nodes)[1]
#FEMbasis = create.FEM.basis(mesh)
# Test function
f = function(x, y, z)
{
a1=1
a2=4
(a1*sin(2*pi*x)*cos(2*pi*y)+a2*sin(3*pi*x))*cos(pi*z)
}
seed_numbers = seq(from = 0, to = 30000, by = 1000)
#flags = rbind(c(FALSE, FALSE, FALSE),c(TRUE, FALSE, FALSE),c(TRUE, TRUE, FALSE),c(FALSE, FALSE, TRUE),c(FALSE, TRUE, TRUE))
flags = rbind(c(FALSE, FALSE),c(TRUE, FALSE),c(TRUE, TRUE))
RMSE_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
#time_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
nRef = seq(from = 1,to = 4, by = 1)
time_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(nRef))
for (i in seq(from = 1,to = dim(flags)[1], by = 1)) {
k = 0
for (seed_number in seed_numbers) {
for (n in nRef) {
x = seq(0,1, length.out = (5*n)+1)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes = dim(mesh$nodes)[1]
FEMbasis = create.FEM.basis(mesh)
k = k + 1
if(k == 1)
NumTimePoints=11
else
NumTimePoints=13
TimePoints=seq(0,2,length.out = NumTimePoints)
SpacePoints=mesh$nodes
SpaceTimePoints=cbind(rep(mesh$nodes[,1],NumTimePoints),rep(mesh$nodes[,2],NumTimePoints),rep(TimePoints,each=nrow(mesh$nodes)))
# Exact solution (pointwise at nodes)
sol_exact=f(SpaceTimePoints[,1],SpaceTimePoints[,2],SpaceTimePoints[,3])
set.seed(seed_number)
ran = range(sol_exact)
data = sol_exact + rnorm(length(sol_exact), mean=0, sd=0.05*abs(ran[2]-ran[1]))
observations=matrix(data,nrow(SpacePoints),NumTimePoints)
# Set PDE parameters
PDE_parameters = list(K = matrix(c(1,0,0,4), nrow = 2), b = c(0,0), c = 0)
# Set smoothing parameter
lambdaS = 1e-4
lambdaT = 1e-4
#### Test 3.1: Without GCV
results <- microbenchmark(output_CPP<-smooth.FEM.time(time_mesh = TimePoints, observations=observations,
FEMbasis=FEMbasis, lambdaS=lambdaS, lambdaT=lambdaT,
PDE_parameters=PDE_parameters,
#FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2],
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2], FLAG_FINITEDIFFERENCES = flags[i,3]   )
,times = 1)
# RMSE evaluation on a fine grid
xeval=runif(1000,0,1)  # quadrato con x tra 0 e 1
yeval=runif(1000,0,1)  # quadrato con y tra 0 e 1
teval=runif(1000,0,2)
sol_eval=eval.FEM.time(output_CPP$fit.FEM.time,space.time.locations = cbind(teval,xeval,yeval))
sol_exact=f(xeval,yeval,teval)
RMSE<-function(f,g) sqrt(mean((f-g)^2))
RMSE_matrix[i, k] = RMSE(sol_eval,sol_exact)
time_matrix[i, k] = results$time/10^6 #ms
}
}
}
library(fdaPDE)
library(microbenchmark)
rm(list=ls())
graphics.off()
# x = seq(0,1, length.out = 41)
# y = x
# locations = expand.grid(x,y)
#
# mesh = create.mesh.2D(locations)
# plot(mesh)
#
# nnodes = dim(mesh$nodes)[1]
#FEMbasis = create.FEM.basis(mesh)
# Test function
f = function(x, y, z)
{
a1=1
a2=4
(a1*sin(2*pi*x)*cos(2*pi*y)+a2*sin(3*pi*x))*cos(pi*z)
}
seed_numbers = seq(from = 0, to = 30000, by = 1000)
flags = rbind(c(FALSE, FALSE, FALSE),c(TRUE, FALSE, FALSE),c(TRUE, TRUE, FALSE),c(FALSE, FALSE, TRUE),c(FALSE, TRUE, TRUE))
#flags = rbind(c(FALSE, FALSE),c(TRUE, FALSE),c(TRUE, TRUE))
RMSE_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
#time_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
nRef = seq(from = 1,to = 4, by = 1)
time_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(nRef))
for (i in seq(from = 1,to = dim(flags)[1], by = 1)) {
k = 0
for (seed_number in seed_numbers) {
for (n in nRef) {
x = seq(0,1, length.out = (5*n)+1)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes = dim(mesh$nodes)[1]
FEMbasis = create.FEM.basis(mesh)
k = k + 1
if(k == 1)
NumTimePoints=11
else
NumTimePoints=13
TimePoints=seq(0,2,length.out = NumTimePoints)
SpacePoints=mesh$nodes
SpaceTimePoints=cbind(rep(mesh$nodes[,1],NumTimePoints),rep(mesh$nodes[,2],NumTimePoints),rep(TimePoints,each=nrow(mesh$nodes)))
# Exact solution (pointwise at nodes)
sol_exact=f(SpaceTimePoints[,1],SpaceTimePoints[,2],SpaceTimePoints[,3])
set.seed(seed_number)
ran = range(sol_exact)
data = sol_exact + rnorm(length(sol_exact), mean=0, sd=0.05*abs(ran[2]-ran[1]))
observations=matrix(data,nrow(SpacePoints),NumTimePoints)
# Set PDE parameters
PDE_parameters = list(K = matrix(c(1,0,0,4), nrow = 2), b = c(0,0), c = 0)
# Set smoothing parameter
lambdaS = 1e-4
lambdaT = 1e-4
#### Test 3.1: Without GCV
results <- microbenchmark(output_CPP<-smooth.FEM.time(time_mesh = TimePoints, observations=observations,
FEMbasis=FEMbasis, lambdaS=lambdaS, lambdaT=lambdaT,
PDE_parameters=PDE_parameters,
#FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2],
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2], FLAG_FINITEDIFFERENCES = flags[i,3]   )
,times = 1)
# RMSE evaluation on a fine grid
xeval=runif(1000,0,1)  # quadrato con x tra 0 e 1
yeval=runif(1000,0,1)  # quadrato con y tra 0 e 1
teval=runif(1000,0,2)
sol_eval=eval.FEM.time(output_CPP$fit.FEM.time,space.time.locations = cbind(teval,xeval,yeval))
sol_exact=f(xeval,yeval,teval)
RMSE<-function(f,g) sqrt(mean((f-g)^2))
RMSE_matrix[i, k] = RMSE(sol_eval,sol_exact)
time_matrix[i, k] = results$time/10^6 #ms
}
}
}
library(fdaPDE)
library(microbenchmark)
rm(list=ls())
graphics.off()
# x = seq(0,1, length.out = 41)
# y = x
# locations = expand.grid(x,y)
#
# mesh = create.mesh.2D(locations)
# plot(mesh)
#
# nnodes = dim(mesh$nodes)[1]
#FEMbasis = create.FEM.basis(mesh)
# Test function
f = function(x, y, z)
{
a1=1
a2=4
(a1*sin(2*pi*x)*cos(2*pi*y)+a2*sin(3*pi*x))*cos(pi*z)
}
seed_numbers = seq(from = 0, to = 10000, by = 1000)
flags = rbind(c(FALSE, FALSE, FALSE),c(TRUE, FALSE, FALSE),c(TRUE, TRUE, FALSE),c(FALSE, FALSE, TRUE),c(FALSE, TRUE, TRUE))
#flags = rbind(c(FALSE, FALSE),c(TRUE, FALSE),c(TRUE, TRUE))
RMSE_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
#time_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
nRef = seq(from = 1,to = 4, by = 1)
time_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(nRef))
for (i in seq(from = 1,to = dim(flags)[1], by = 1)) {
k = 0
for (seed_number in seed_numbers) {
for (n in nRef) {
x = seq(0,1, length.out = (5*n)+1)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes = dim(mesh$nodes)[1]
FEMbasis = create.FEM.basis(mesh)
k = k + 1
if(k == 1)
NumTimePoints=11
else
NumTimePoints=13
TimePoints=seq(0,2,length.out = NumTimePoints)
SpacePoints=mesh$nodes
SpaceTimePoints=cbind(rep(mesh$nodes[,1],NumTimePoints),rep(mesh$nodes[,2],NumTimePoints),rep(TimePoints,each=nrow(mesh$nodes)))
# Exact solution (pointwise at nodes)
sol_exact=f(SpaceTimePoints[,1],SpaceTimePoints[,2],SpaceTimePoints[,3])
set.seed(seed_number)
ran = range(sol_exact)
data = sol_exact + rnorm(length(sol_exact), mean=0, sd=0.05*abs(ran[2]-ran[1]))
observations=matrix(data,nrow(SpacePoints),NumTimePoints)
# Set PDE parameters
PDE_parameters = list(K = matrix(c(1,0,0,4), nrow = 2), b = c(0,0), c = 0)
# Set smoothing parameter
lambdaS = 1e-4
lambdaT = 1e-4
#### Test 3.1: Without GCV
results <- microbenchmark(output_CPP<-smooth.FEM.time(time_mesh = TimePoints, observations=observations,
FEMbasis=FEMbasis, lambdaS=lambdaS, lambdaT=lambdaT,
PDE_parameters=PDE_parameters,
#FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2],
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2], FLAG_FINITEDIFFERENCES = flags[i,3]   )
,times = 1)
# RMSE evaluation on a fine grid
xeval=runif(1000,0,1)  # quadrato con x tra 0 e 1
yeval=runif(1000,0,1)  # quadrato con y tra 0 e 1
teval=runif(1000,0,2)
sol_eval=eval.FEM.time(output_CPP$fit.FEM.time,space.time.locations = cbind(teval,xeval,yeval))
sol_exact=f(xeval,yeval,teval)
RMSE<-function(f,g) sqrt(mean((f-g)^2))
RMSE_matrix[i, k] = RMSE(sol_eval,sol_exact)
time_matrix[i, k] = results$time/10^6 #ms
}
}
}
library(fdaPDE)
library(microbenchmark)
rm(list=ls())
graphics.off()
# x = seq(0,1, length.out = 41)
# y = x
# locations = expand.grid(x,y)
#
# mesh = create.mesh.2D(locations)
# plot(mesh)
#
# nnodes = dim(mesh$nodes)[1]
#FEMbasis = create.FEM.basis(mesh)
# Test function
f = function(x, y, z)
{
a1=1
a2=4
(a1*sin(2*pi*x)*cos(2*pi*y)+a2*sin(3*pi*x))*cos(pi*z)
}
seed_numbers = seq(from = 1000,to = 10000, by = 2500)
flags = rbind(c(FALSE, FALSE, FALSE),c(TRUE, FALSE, FALSE),c(TRUE, TRUE, FALSE),c(FALSE, FALSE, TRUE),c(FALSE, TRUE, TRUE))
RMSE_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
nRef = seq(from = 1,to = 4, by = 1)
for (i in seq(from = 1,to = dim(flags)[1], by = 1)) {
k = 0
for (seed_number in seed_numbers) {
for (n in nRef) {
x = seq(0,1, length.out = (5*n)+1)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes = dim(mesh$nodes)[1]
FEMbasis = create.FEM.basis(mesh)
k = k + 1
if(k == 1)
NumTimePoints=11
else
NumTimePoints=13
TimePoints=seq(0,2,length.out = NumTimePoints)
SpacePoints=mesh$nodes
SpaceTimePoints=cbind(rep(mesh$nodes[,1],NumTimePoints),rep(mesh$nodes[,2],NumTimePoints),rep(TimePoints,each=nrow(mesh$nodes)))
# Exact solution (pointwise at nodes)
sol_exact=f(SpaceTimePoints[,1],SpaceTimePoints[,2],SpaceTimePoints[,3])
set.seed(seed_number)
ran = range(sol_exact)
data = sol_exact + rnorm(length(sol_exact), mean=0, sd=0.05*abs(ran[2]-ran[1]))
observations=matrix(data,nrow(SpacePoints),NumTimePoints)
# Set PDE parameters
PDE_parameters = list(K = matrix(c(1,0,0,4), nrow = 2), b = c(0,0), c = 0)
# Set smoothing parameter
lambdaS = 1e-4
lambdaT = 1e-4
#### Test 3.1: Without GCV
output_CPP<-smooth.FEM.time(time_mesh = TimePoints, observations=observations,
FEMbasis=FEMbasis, lambdaS=lambdaS, lambdaT=lambdaT,
PDE_parameters=PDE_parameters,
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2], FLAG_FINITEDIFFERENCES = flags[i,3]   )
# RMSE evaluation on a fine grid
xeval=runif(1000,0,1)  # quadrato con x tra 0 e 1
yeval=runif(1000,0,1)  # quadrato con y tra 0 e 1
teval=runif(1000,0,2)
sol_eval=eval.FEM.time(output_CPP$fit.FEM.time,space.time.locations = cbind(teval,xeval,yeval))
sol_exact=f(xeval,yeval,teval)
RMSE<-function(f,g) sqrt(mean((f-g)^2))
RMSE_matrix[i, k] = RMSE(sol_eval,sol_exact)
}
}
library(fdaPDE)
library(microbenchmark)
rm(list=ls())
graphics.off()
f = function(x, y, z)
{
a1=1
a2=4
(a1*sin(2*pi*x)*cos(2*pi*y)+a2*sin(3*pi*x))*cos(pi*z)
}
seed_numbers = seq(from = 1000,to = 10000, by = 2500)
flags = rbind(c(FALSE, FALSE, FALSE),c(TRUE, FALSE, FALSE),c(TRUE, TRUE, FALSE),c(FALSE, FALSE, TRUE),c(FALSE, TRUE, TRUE))
RMSE_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
nRef = seq(from = 1,to = 4, by = 1)
for (i in seq(from = 1,to = dim(flags)[1], by = 1)) {
k = 0
for (seed_number in seed_numbers) {
for (n in nRef) {
x = seq(0,1, length.out = (5*n)+1)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes = dim(mesh$nodes)[1]
FEMbasis = create.FEM.basis(mesh)
k = k + 1
if(k == 1)
NumTimePoints=11
else
NumTimePoints=13
TimePoints=seq(0,2,length.out = NumTimePoints)
SpacePoints=mesh$nodes
SpaceTimePoints=cbind(rep(mesh$nodes[,1],NumTimePoints),rep(mesh$nodes[,2],NumTimePoints),rep(TimePoints,each=nrow(mesh$nodes)))
# Exact solution (pointwise at nodes)
sol_exact=f(SpaceTimePoints[,1],SpaceTimePoints[,2],SpaceTimePoints[,3])
set.seed(seed_number)
ran = range(sol_exact)
data = sol_exact + rnorm(length(sol_exact), mean=0, sd=0.05*abs(ran[2]-ran[1]))
observations=matrix(data,nrow(SpacePoints),NumTimePoints)
# Set PDE parameters
PDE_parameters = list(K = matrix(c(1,0,0,4), nrow = 2), b = c(0,0), c = 0)
# Set smoothing parameter
lambdaS = 1e-4
lambdaT = 1e-4
#### Test 3.1: Without GCV
output_CPP<-smooth.FEM.time(time_mesh = TimePoints, observations=observations,
FEMbasis=FEMbasis, lambdaS=lambdaS, lambdaT=lambdaT,
PDE_parameters=PDE_parameters,
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2], FLAG_FINITEDIFFERENCES = flags[i,3]   )
# RMSE evaluation on a fine grid
xeval=runif(1000,0,1)  # quadrato con x tra 0 e 1
yeval=runif(1000,0,1)  # quadrato con y tra 0 e 1
teval=runif(1000,0,2)
sol_eval=eval.FEM.time(output_CPP$fit.FEM.time,space.time.locations = cbind(teval,xeval,yeval))
sol_exact=f(xeval,yeval,teval)
RMSE<-function(f,g) sqrt(mean((f-g)^2))
RMSE_matrix[i, k] = RMSE(sol_eval,sol_exact)
}
}
quartz()
labels <- c("B-SPLINE", "PAR MONOLITICO", "PAR ITERATIVO", "FD MONOLITICO", "FD ITERATIVO")
boxplot(data.frame(t(RMSE_matrix)), las=1, col='gold', names = labels)
New_alg_mon <- c(0.1416270, 0.1386325, 0.1374639, 0.1439854)
New_alg_iter <- c(0.1416283, 0.1386323, 0.1374649, 0.1439876)
# Aggiunta della nuova riga alla matrice
RMSE_matrix <- rbind(RMSE_matrix, New_alg_mon)
RMSE_matrix <- rbind(RMSE_matrix, New_alg_iter)
library(fdaPDE)
library(microbenchmark)
rm(list=ls())
graphics.off()
# x = seq(0,1, length.out = 41)
# y = x
# locations = expand.grid(x,y)
#
# mesh = create.mesh.2D(locations)
# plot(mesh)
#
# nnodes = dim(mesh$nodes)[1]
#FEMbasis = create.FEM.basis(mesh)
# Test function
f = function(x, y, z)
{
a1=1
a2=4
(a1*sin(2*pi*x)*cos(2*pi*y)+a2*sin(3*pi*x))*cos(pi*z)
}
seed_numbers = seq(from = 0, to = 10000, by = 1000)
flags = rbind(c(FALSE, FALSE, FALSE),c(TRUE, FALSE, FALSE),c(TRUE, TRUE, FALSE),c(FALSE, FALSE, TRUE),c(FALSE, TRUE, TRUE))
#flags = rbind(c(FALSE, FALSE),c(TRUE, FALSE),c(TRUE, TRUE))
RMSE_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
#time_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(seed_numbers))
nRef = seq(from = 1,to = 4, by = 1)
time_matrix <- matrix(0, nrow = dim(flags)[1], ncol = length(nRef))
for (i in seq(from = 1,to = dim(flags)[1], by = 1)) {
k = 0
for (seed_number in seed_numbers) {
k = k + 1
for (n in nRef) {
x = seq(0,1, length.out = (5*n)+1)
y = x
locations = expand.grid(x,y)
mesh = create.mesh.2D(locations)
plot(mesh)
nnodes = dim(mesh$nodes)[1]
FEMbasis = create.FEM.basis(mesh)
#k = k + 1
if(k == 1)
NumTimePoints=11
else
NumTimePoints=13
TimePoints=seq(0,2,length.out = NumTimePoints)
SpacePoints=mesh$nodes
SpaceTimePoints=cbind(rep(mesh$nodes[,1],NumTimePoints),rep(mesh$nodes[,2],NumTimePoints),rep(TimePoints,each=nrow(mesh$nodes)))
# Exact solution (pointwise at nodes)
sol_exact=f(SpaceTimePoints[,1],SpaceTimePoints[,2],SpaceTimePoints[,3])
set.seed(seed_number)
ran = range(sol_exact)
data = sol_exact + rnorm(length(sol_exact), mean=0, sd=0.05*abs(ran[2]-ran[1]))
observations=matrix(data,nrow(SpacePoints),NumTimePoints)
# Set PDE parameters
PDE_parameters = list(K = matrix(c(1,0,0,4), nrow = 2), b = c(0,0), c = 0)
# Set smoothing parameter
lambdaS = 1e-4
lambdaT = 1e-4
#### Test 3.1: Without GCV
results <- microbenchmark(output_CPP<-smooth.FEM.time(time_mesh = TimePoints, observations=observations,
FEMbasis=FEMbasis, lambdaS=lambdaS, lambdaT=lambdaT,
PDE_parameters=PDE_parameters,
#FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2],
FLAG_PARABOLIC = flags[i,1], FLAG_ITERATIVE = flags[i,2], FLAG_FINITEDIFFERENCES = flags[i,3]   )
,times = 1)
# RMSE evaluation on a fine grid
xeval=runif(1000,0,1)  # quadrato con x tra 0 e 1
yeval=runif(1000,0,1)  # quadrato con y tra 0 e 1
teval=runif(1000,0,2)
sol_eval=eval.FEM.time(output_CPP$fit.FEM.time,space.time.locations = cbind(teval,xeval,yeval))
sol_exact=f(xeval,yeval,teval)
RMSE<-function(f,g) sqrt(mean((f-g)^2))
RMSE_matrix[i, k] = RMSE(sol_eval,sol_exact)
#time_matrix[i, k] = results$time/10^6 #ms
}
}
}
################################################################################################
################################################################################################
#### Test 3: square domain ####
#            locations in nodes
#            PDE
#            no covariates
#            no BC
#            order FE = 2
#            separate penalizations
library(fdaPDE)
load("/Users/davideserra/Desktop/PoliMi 2021-2022/Progetto NAPDE + PACS/Codici/Dati_Grafici_RData/time_matrix_Test3_0005.RData")
load("/Users/davideserra/Desktop/PoliMi 2021-2022/Progetto NAPDE + PACS/Codici/Dati_Grafici_RData/time_matrix_Test3_0005.RData")
load("~/Desktop/PoliMi 2021-2022/Progetto NAPDE + PACS/Codici/Dati_Grafici_RData/time_matrix_Test3_0005.RData")
time_matrix
